import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
city = "–ü–∞—Ä–∏–∂"
country = "–§—Ä–∞–Ω—Ü–∏—è"
keywords = ["—Ç—É—Ä–∏–∑–º", "–∫–ª–∏–º–∞—Ç", "–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "–æ—Ç–¥—ã—Ö"]  # –∏–ª–∏: ["—Ç—É—Ä–∏–∑–º", "–∫–ª–∏–º–∞—Ç", "–æ—Ç–¥—ã—Ö", "–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"]
query = f"{city} {country} " + ", ".join(keywords)

url = "https://real-time-web-search.p.rapidapi.com/search-advanced-v2"
querystring = {
    "q": query,
    "fetch_ai_overviews": "false",
    "num": "5",     # –ö–æ–ª-–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    "start": "0",
    "gl": "ru",     # –ì–µ–æ-–ª–æ–∫–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞: "ru", "us", "fr" –∏ —Ç.–¥.
    "hl": "ru",     # –Ø–∑—ã–∫ –ø–æ–∏—Å–∫–∞: "ru" –∏–ª–∏ "en"
    "nfpr": "0"
}

headers = {
    "x-rapidapi-key": "e2788d8fe3msh024a048dc2e12ebp1f2ca4jsnc6f88a5e903a",  # –¢–≤–æ–π –∫–ª—é—á
    "x-rapidapi-host": "real-time-web-search.p.rapidapi.com"
}

# –ó–∞–ø—Ä–æ—Å
print(f"üîç –ó–∞–ø—Ä–æ—Å: {query}")
print("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")

try:
    response = requests.get(url, headers=headers, params=querystring)
    response.raise_for_status()
    print("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ.")
except requests.exceptions.HTTPError as err:
    print("‚ùå –û—à–∏–±–∫–∞ HTTP:", err)
    print("–û—Ç–≤–µ—Ç:", response.text)
    exit()
except Exception as e:
    print("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:", e)
    exit()

# –ü–∞—Ä—Å–∏–Ω–≥
data = response.json()
results = data.get("data", {}).get("organic_results", [])


if not results:
    print("‚ö†Ô∏è –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ 'organic'. –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç:")
    print(data)
    exit()

snippets = []
for i, res in enumerate(results):
    title = res.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
    snippet = res.get("snippet", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")
    url_result = res.get("url", "‚Äî")
    print(f"\nüîπ [{i + 1}] {title}\n{snippet}\nüîó {url_result}")
    snippets.append(snippet)

# –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
full_text = " ".join(snippets)
if full_text.strip():
    print("\nüìå –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è GPT:")
    print(full_text[:1000], "..." if len(full_text) > 1000 else "")
else:
    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç.")
